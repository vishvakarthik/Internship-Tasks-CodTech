# === Sentiment Analysis using TF-IDF and Logistic Regression ===

# 1) Notebook magic for plots
%matplotlib inline

# 2) Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 3) Example dataset: customer reviews
data = {
    'review': [
        'I love this product, it is amazing!',
        'Absolutely terrible, waste of money.',
        'Very satisfied with the purchase.',
        'I hate it, it broke in one day.',
        'Best purchase ever, highly recommend!',
        'Not worth it, very disappointing.',
        'Fantastic quality and great support.',
        'Awful experience, never buying again.',
        'I am extremely happy with this!',
        'Worst product I have ever bought.'
    ],
    'sentiment': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]  # 1 = Positive, 0 = Negative
}

df = pd.DataFrame(data)
print("=== Raw Data ===")
print(df)

# 4) Preprocessing: Split data
X_train, X_test, y_train, y_test = train_test_split(
    df['review'], df['sentiment'], test_size=0.3, random_state=42
)

# 5) TF-IDF Vectorization
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

print("\n=== Example TF-IDF Features ===")
print(X_train_tfidf.toarray()[:2])  # Show first 2 reviews vectorized

# 6) Build and train Logistic Regression model
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# 7) Make predictions
y_pred = model.predict(X_test_tfidf)

# 8) Evaluate model
print("\n=== Accuracy ===")
print(accuracy_score(y_test, y_pred))

print("\n=== Classification Report ===")
print(classification_report(y_test, y_pred))

print("\n=== Confusion Matrix ===")
print(confusion_matrix(y_test, y_pred))

# 9) Test on new reviews
new_reviews = [
    "This is the best thing I've ever used.",
    "Horrible quality and terrible support."
]
new_reviews_tfidf = vectorizer.transform(new_reviews)
new_preds = model.predict(new_reviews_tfidf)
print("\n=== Predictions on New Reviews ===")
for review, label in zip(new_reviews, new_preds):
    sentiment = "Positive 😊" if label == 1 else "Negative 😞"
    print(f"Review: '{review}' --> Sentiment: {sentiment}")
