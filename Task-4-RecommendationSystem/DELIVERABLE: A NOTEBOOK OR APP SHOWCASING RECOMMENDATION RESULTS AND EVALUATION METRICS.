# === Task 4: Recommendation System ===

# 1) Notebook magic
%matplotlib inline

# 2) Import libraries
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
import numpy as np

# 3) User-Item Matrix
data = {
    'User': ['Alice', 'Bob', 'Charlie', 'David', 'Emma'],
    'Movie1': [5, 4, np.nan, 0, 0],
    'Movie2': [4, np.nan, np.nan, 0, 0],
    'Movie3': [1, 1, np.nan, 5, 4],
    'Movie4': [0, 1, 5, 4, 0],
    'Movie5': [0, 0, 5, 4, 0]
}

df = pd.DataFrame(data)
df.set_index('User', inplace=True)
print("=== User-Item Matrix ===")
print(df)

# 4) User-User Similarity
similarity_matrix = cosine_similarity(df.fillna(0))
similarity_df = pd.DataFrame(similarity_matrix, index=df.index, columns=df.index)
print("\n=== User Similarity Matrix ===")
print(similarity_df)

# 5) Predict missing ratings for a user
def predict_ratings(user):
    user_idx = df.index.get_loc(user)
    sim_scores = similarity_matrix[user_idx]
    weighted_ratings = similarity_matrix.dot(df.fillna(0))
    sum_sim = np.abs(similarity_matrix).sum(axis=1)
    user_pred = weighted_ratings[user_idx] / sum_sim
    predictions = pd.Series(user_pred, index=df.columns)
    print(f"\n=== Predicted Ratings for {user} ===")
    print(predictions)
    return predictions

# Get recommendations for Charlie
predictions = predict_ratings('Charlie')

# Recommend top items
recommendations = predictions.sort_values(ascending=False)
print("\n=== Top Recommendations for Charlie ===")
print(recommendations)

# 6) Evaluate with RMSE (optional for known values)
# Example: if you have true ratings vs predicted
# Here, let's simulate:
true_ratings = [5, 4, 1, 5, 5]
predicted_ratings = [5, 3.8, 1.2, 4.9, 4.8]
rmse = mean_squared_error(true_ratings, predicted_ratings, squared=False)
print(f"\n=== RMSE (Example): {rmse:.4f} ===")
